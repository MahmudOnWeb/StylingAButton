<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComputerFont" xml:space="preserve">
    <value>Schriftart</value>
  </data>
  <data name="ComputerFontContent" xml:space="preserve">
    <value>Eine Computerschrift (oder -schrift) ist eine digitale Datendatei, die eine Reihe grafisch verwandter Glyphen, Zeichen oder Symbole enthält. Obwohl sich der Begriff Schriftart zunächst auf eine Reihe beweglicher Metallteile in einem Stil und einer Größe bezog, wird er seit etwa 1990 im Allgemeinen verwendet, um eine Reihe digitaler Formen in einem einzigen Stil zu bezeichnen, die auf verschiedene Größen skalierbar sind.
Eine Definition von Microsoft beschreibt die Schriftart als "Ein Grafikdesign, das auf eine Sammlung von Zahlen, Symbolen und Zeichen angewendet wird, die eine bestimmte Schriftart zusammen mit anderen Eigenschaften wie Größe, Abstand und Tonhöhe beschreiben".

Es gibt drei grundlegende Arten von Datenformaten für Computerschriftdateien: Bitmap-Schriftarten, Vektor- oder Umrissschriftarten und Strichschriftarten.

Umrissschriftarten oder Vektorschriftarten sind eine Sammlung von Vektorbildern, die aus Linien und Kurven bestehen, die die Grenze von Glyphen definieren. Frühe Vektorschriftarten wurden von Vektormonitoren und Vektorplottern unter Verwendung ihrer eigenen internen Schriftarten verwendet, üblicherweise mit dünnen Einzelstrichen anstelle von dick umrissenen Glyphen. Das Aufkommen des Desktop Publishing brachte die Notwendigkeit eines universellen Standards mit sich, um die grafische Benutzeroberfläche der ersten Macintosh- und Laserdrucker zu integrieren. Der universelle Standard war (und ist) Adobe PostScript. Beispiele für Gliederungsschriftarten sind PostScript-Schriftarten vom Typ 1 und Typ 3, TrueType und OpenType.

TrueType ist ein Umrissschriftstandard, der Ende der 1980er Jahre von Apple entwickelt wurde.
OpenType ist ein Format für skalierbare Computerschriftarten. Es wurde auf dem Vorgänger TrueType aufgebaut, wobei die Grundstruktur von TrueType beibehalten und viele komplexe Datenstrukturen für die Vorgabe des typografischen Verhaltens hinzugefügt wurden. OpenType ist eine eingetragene Marke der Microsoft Corporation.</value>
  </data>
  <data name="ComputingButton" xml:space="preserve">
    <value>Schaltfläche</value>
  </data>
  <data name="ComputingButtonContent" xml:space="preserve">
    <value>Der Begriff Schaltfläche in der Datenverarbeitung, auch als Befehlsschaltfläche bezeichnet, bezieht sich auf ein grafisches Steuerelement, das dem Benutzer eine einfache Möglichkeit zur Interaktion mit dem System bietet. Microsoft gibt die folgende Definition einer Schaltfläche an: "Ein grafisches Element, das der physischen Schaltfläche oder Tastaturtaste in der Benutzeroberfläche ähnelt. Eine Schaltfläche wird" gedrückt ", indem Sie mit der Maus darauf klicken, die Eingabetaste oder die Leertaste auf der Tastatur drücken. wenn die Taste den Fokus hat oder durch Tippen mit einem Finger (wenn das Display dies unterstützt). "

Eine typische Schaltfläche ist ein Rechteck, das breiter als hoch ist und in dessen Mitte eine beschreibende Beschriftung steht. Die gebräuchlichste Methode zum Drücken einer Taste ist das Klicken mit einem Mauszeiger. Es können jedoch auch andere Eingaben wie Tastenanschläge verwendet werden. Eine Schaltfläche ist jedoch nicht auf eine rechteckige Form beschränkt. Die einzige Voraussetzung für die Tasteninteraktion ist, dass der Benutzer einen Befehl per Klick ausführen kann.</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Nächster</value>
  </data>
  <data name="WritingSystem" xml:space="preserve">
    <value>Schreibsystem</value>
  </data>
  <data name="WritingSystemContent" xml:space="preserve">
    <value>Ein Schriftsystem (oder Skript) ist eine Methode zur visuellen Darstellung der verbalen Kommunikation. Während sowohl Schreiben als auch Sprechen bei der Übermittlung von Nachrichten nützlich sind, unterscheidet sich das Schreiben darin, dass es auch eine zuverlässige Form der Informationsspeicherung und -übertragung ist.

Es wurden verschiedene Ansätze verfolgt, um Schriftsysteme zu klassifizieren. Der häufigste und grundlegendste ist eine breite Unterteilung in drei Kategorien: logografisch, syllabisch und alphabetisch. Alle drei können jedoch in einem bestimmten Schriftsystem in unterschiedlichen Anteilen gefunden werden, was es oft schwierig macht, ein System eindeutig zu kategorisieren. Die vorherrschenden nationalen Arten von Schriftsystemen sind: alphabetisch - zum Beispiel lateinische und kyrillische Schriften, logografisch und silbenartig, wie Hanzi, Kana, Hangul, Abjad - wie Arabisch und Hebräisch und abugida-artige nord- und südindische Schriften, äthiopische Schrift.</value>
  </data>
</root>