<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComputerFont" xml:space="preserve">
    <value>Fuente</value>
  </data>
  <data name="ComputerFontContent" xml:space="preserve">
    <value>Una fuente de computadora (o fuente) es un archivo de datos digitales, que contiene un conjunto de glifos, caracteres o símbolos relacionados gráficamente. Aunque el término fuente se refería primero a un conjunto de piezas metálicas móviles en un estilo y tamaño, desde alrededor de la década de 1990 generalmente se usa para referirse a un conjunto de formas digitales en un solo estilo, escalable a diferentes tamaños.
Una definición de Microsoft describe la fuente como "Un diseño gráfico aplicado a una colección de números, símbolos y caracteres que describe un tipo de letra determinado, junto con otras cualidades como el tamaño, el espaciado y el tono".

Existen tres tipos básicos de formatos de datos de archivos de fuentes de computadora: fuentes de mapa de bits, fuentes vectoriales o de contorno y fuentes de trazo.

Las fuentes de contorno o las fuentes vectoriales son una colección de imágenes vectoriales, que consisten en líneas y curvas que definen el límite de los glifos. Las primeras fuentes de vector fueron utilizadas por monitores de vectores y trazadores de vectores usando sus propias fuentes internas, generalmente con trazos simples delgados en lugar de glifos gruesos. El advenimiento de la publicación de escritorio trajo la necesidad de un estándar universal para integrar la interfaz gráfica de usuario de las primeras impresoras Macintosh y láser. El estándar universal era (y sigue siendo) Adobe PostScript. Ejemplos de fuentes de contorno incluyen fuentes PostScript tipo 1 y tipo 3, TrueType, OpenType.

TrueType es un estándar de fuente de contorno desarrollado por Apple a fines de la década de 1980.
OpenType es un formato para fuentes de computadora escalables. Fue construido sobre su predecesor TrueType, conservando la estructura básica de TrueType y agregando muchas estructuras de datos complejas para prescribir el comportamiento tipográfico. OpenType es una marca registrada de Microsoft Corporation.</value>
  </data>
  <data name="ComputingButton" xml:space="preserve">
    <value>botón</value>
  </data>
  <data name="ComputingButtonContent" xml:space="preserve">
    <value>El término botón en informática, también conocido como botón de comando, se refiere a un elemento de control gráfico que proporciona al usuario una forma sencilla de interactuar con el sistema. Microsoft da la siguiente definición de un botón: "Un elemento gráfico que parece similar al botón físico o la tecla del teclado en la interfaz de usuario. Un botón se" presiona "haciendo clic en él con un mouse, presionando Intro o Espacio en el teclado, si el botón tiene el foco, o tocando con el dedo (si la pantalla lo admite) ".

Un botón típico es un rectángulo, más ancho que alto, con un título descriptivo en su centro. El método más común para presionar un botón es hacer clic con un puntero controlado por un mouse, pero también se pueden usar otras entradas, como las pulsaciones de teclas. Sin embargo, un botón no está restringido a una forma rectangular. El único requisito para la interacción de los botones es que el usuario pueda ejecutar un comando haciendo clic.</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Siguiente</value>
  </data>
  <data name="WritingSystem" xml:space="preserve">
    <value>Sistema de escritura</value>
  </data>
  <data name="WritingSystemContent" xml:space="preserve">
    <value>Un sistema de escritura (o guión) es un método para representar visualmente la comunicación verbal. Si bien tanto la escritura como el habla son útiles para transmitir mensajes, la escritura también difiere en ser una forma confiable de almacenamiento y transferencia de información.

Se han tomado varios enfoques para clasificar los sistemas de escritura, el más común y básico es una división amplia en tres categorías: logográfica, silábica y alfabética. Sin embargo, los tres se pueden encontrar en cualquier sistema de escritura en proporciones variables, lo que a menudo hace que sea difícil clasificar un sistema de manera única. Los tipos nacionales predominantes de sistemas de escritura son: alfabético, por ejemplo, escrituras latinas y cirílicas, logográfico y silábico, como hanzi, kana, hangul, abjad, como árabe y hebreo, y abugida, como las escrituras indias del norte y del sur, la escritura etíope.</value>
  </data>
</root>